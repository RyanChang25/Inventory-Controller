local replicatedStorage = game:GetService("ReplicatedStorage")
local userInputService = game:GetService("UserInputService")
--------------------------------------------------------------------
local GameDictionary = require(replicatedStorage.Shared.GameDictionary)
local Maid = require(replicatedStorage.Shared.Maid)
local MouseOverModule = require(script.Parent.Parent.Modules:WaitForChild("MouseOverModule"))
local Knit = require(game:GetService("ReplicatedStorage").Packages.Knit)
--------------------------------------------------------------------
local MainInterface = game.Players.LocalPlayer.PlayerGui.MainInterface
local Mouse = game.Players.LocalPlayer:GetMouse()
local InFrame = true
local FrameChosen = "ItemInfo"
--------------------------------------------------------------------
local InventoryTable = {}
--------------------------------------------------------------------
local InventoryFrame = {}
InventoryFrame.__index = InventoryFrame

function InventoryFrame.newEmpty(scrollingFrame)
	local emptyFrame = {}
	emptyFrame._Frame = MainInterface.InventoryUI.SFClip[scrollingFrame].UIGridLayout.ItemFrame:Clone()
	emptyFrame._Iteration = (#MainInterface.InventoryUI.SFClip[scrollingFrame]:GetChildren()-2) + 1
	emptyFrame._ScrollFrame = MainInterface.InventoryUI.SFClip[scrollingFrame]
	return setmetatable(emptyFrame, InventoryFrame)
end

function InventoryFrame:setEmpty()
	self._Frame.Parent = self._ScrollFrame
	self._Frame.LayoutOrder = self._Iteration
	self._Frame.Name = self._Iteration
end

function InventoryFrame.newItem(name, rarity, upgrades, bonus, equipped, bind, scrollingFrame)
	local newItem = {}
	newItem._Name = name
	newItem._Rarity = rarity
	newItem._Damage = GameDictionary.Items[name].Base + (math.floor(((GameDictionary.Items[name].Base*0.05)+1) + 0.5) * GameDictionary.Rarities[rarity].UpgradeMultiplier) 
		+ (math.floor(((GameDictionary.Items[name].Base*0.05)+1) + 0.5) * upgrades)
	newItem._Upgrades = upgrades
	newItem._Level = GameDictionary.Items[name].Level
	newItem._Bonus = bonus
	newItem._Maid = Maid.new()
	newItem._Equipped = equipped
	newItem._Bind = bind
	newItem._ScrollFrame = MainInterface.InventoryUI.SFClip[scrollingFrame]
	
	return setmetatable(newItem, InventoryFrame)
end

function InventoryFrame:setItem()
	
	table.insert(InventoryTable, self)
	
	if MainInterface.InventoryUI.Unsort.TextLabel.TextColor3 == Color3.fromRGB(226, 226, 226) then
		for i = 0, #self._ScrollFrame:GetChildren()-2, 1 do 
			if self._ScrollFrame:FindFirstChild(i) then
				if self._ScrollFrame:FindFirstChild(i).ImageButton.Image == "" then
					self._Iteration = #InventoryTable
					local frame = self._ScrollFrame:FindFirstChild(i)	
					self._Frame = frame		
					self._Frame.LayoutOrder = self._Iteration
					break
				end
			end
		end
	elseif MainInterface.InventoryUI.SortLevel.TextLabel.TextColor3 == Color3.fromRGB(226, 226, 226) then
		for i,v in pairs (self._ScrollFrame:GetChildren()) do
			if v:IsA("Frame") and v.ImageButton.Image == "" then	
				self._Iteration = #InventoryTable
				self._Frame = v
				v.LayoutOrder = -(self._Level)
				break
			end
		end
	elseif MainInterface.InventoryUI.SortRarity.TextLabel.TextColor3 == Color3.fromRGB(226, 226, 226) then
		for i,v in pairs (self._ScrollFrame:GetChildren()) do
			if v:IsA("Frame") and v.ImageButton.Image == "" then
				self._Iteration = #InventoryTable
				self._Frame = v
				v.LayoutOrder = GameDictionary.Rarities[self._Rarity].Sort
				break
			end
		end
	end
	
	if GameDictionary.Items[self._Name].Level > MainInterface.TopBar.ExpFrame.LevelText.LevelValue.Value then
		self._Frame.Lock.LvlReq.Text = "LVL REQ: "..GameDictionary.Items[self._Name].Level
		self._Frame.Lock.Visible = true
	end
	
	self._Frame.Rarity.Value = self._Rarity
	self._Frame.Level.Value = self._Level
	
	self._Frame.ImageButton.Image = "rbxassetid://"..GameDictionary.Items[self._Name].Image
	self._Frame.InventorySlot.ImageColor3 = GameDictionary.Rarities[self._Rarity].Color
	self._Frame.UpgradeText.TextColor3 = GameDictionary.Rarities[self._Rarity].Color
	
	if self._Upgrades ~= 0 then
		self._Frame.UpgradeText.Text = "+ "..self._Upgrades
	end

	local MouseEnter, MouseLeave = MouseOverModule.MouseEnterLeaveEvent(self._Frame)
	self._Maid.MouseEnterConnection = MouseEnter:Connect(function()
		if MainInterface.InventoryUI.Visible and InFrame and MainInterface.ArcaneInfo.Visible == false and self._ScrollFrame.Visible then
			
			if GameDictionary.Items[self._Name].Type2 then
				FrameChosen = "ItemInfo2"
				MainInterface[FrameChosen].BaseDamage2.Text = "+"..GameDictionary.Items[self._Name].Base2 
					+ (math.floor(((GameDictionary.Items[self._Name].Base2*0.05)+1) + 0.5) * GameDictionary.Rarities[self._Rarity].UpgradeMultiplier) 
					+ (math.floor(((GameDictionary.Items[self._Name].Base2*0.05)+1) + 0.5) * self._Upgrades).." "..GameDictionary.Items[self._Name].Type2
				MainInterface[FrameChosen].BaseDamage2.TextColor3 = GameDictionary["Stat Types"][GameDictionary.Items[self._Name].Type2].Color
				MainInterface[FrameChosen].IconType2.ImageColor3 = GameDictionary["Stat Types"][GameDictionary.Items[self._Name].Type2].Color
			else
				FrameChosen = "ItemInfo"
			end
			
			if self._Damage ~= 0 then
				MainInterface[FrameChosen].BaseDamage.Text = "+"..self._Damage.." "..GameDictionary.Items[self._Name].Type
			else
				MainInterface[FrameChosen].BaseDamage.Text = "---"
			end
			
			MainInterface[FrameChosen].BaseDamage.TextColor3 = GameDictionary["Stat Types"][GameDictionary.Items[self._Name].Type].Color
			MainInterface[FrameChosen].IconType.ImageColor3 = GameDictionary["Stat Types"][GameDictionary.Items[self._Name].Type].Color
				
			MainInterface[FrameChosen].ItemFrame.ImageButton.Image = "rbxassetid://"..GameDictionary.Items[self._Name].Image
			MainInterface[FrameChosen].ItemFrame.InventorySlot.ImageColor3 = GameDictionary.Rarities[self._Rarity].Color	
			MainInterface[FrameChosen].ItemDesc.Text = GameDictionary.Items[self._Name].Desc
			MainInterface[FrameChosen].WeaponName.TextColor3 = GameDictionary.Rarities[self._Rarity].Color
			MainInterface[FrameChosen].ItemFrame.UpgradeText.TextColor3 = GameDictionary.Rarities[self._Rarity].Color
			
			MainInterface[FrameChosen].WeaponName.Text = "Lvl "..GameDictionary.Items[self._Name].Level..". "..self._Name.." + "..self._Upgrades
			MainInterface[FrameChosen].ItemFrame.UpgradeText.Text = "+ "..self._Upgrades

			local BonusType = self._Bonus
			
			if self._Bonus ~= "---" then
				local Trait = GameDictionary.Traits[BonusType] 
				MainInterface[FrameChosen].Bonus1.TextColor3 = Trait.Color
				MainInterface[FrameChosen].BonusText.TextColor3 = Trait.Color
				MainInterface[FrameChosen].BonusType.ImageColor3 = Trait.Color
				MainInterface[FrameChosen].Bonus1.Text = BonusType .." "..Trait.Stars
				MainInterface[FrameChosen].ItemInfo.ExtraBorder.Visible = true
				MainInterface[FrameChosen].BonusText.Text = Trait.Desc
			else
				MainInterface[FrameChosen].Bonus1.TextColor3 = Color3.fromRGB(66, 66, 66)
				MainInterface[FrameChosen].BonusText.TextColor3 = Color3.fromRGB(66, 66, 66)
				MainInterface[FrameChosen].BonusType.ImageColor3 = Color3.fromRGB(66, 66, 66)
				MainInterface[FrameChosen].ItemInfo.ExtraBorder.Visible = false
				MainInterface[FrameChosen].Bonus1.Text = self._Bonus
				MainInterface[FrameChosen].BonusText.Text = ""
			end
			
			MainInterface[FrameChosen].Visible = true
		end

	end)

	self._Maid.MouseLeaveConnection = MouseLeave:Connect(function()
		if MainInterface.InventoryUI.Visible and InFrame and MainInterface.ArcaneInfo.Visible == false and self._ScrollFrame.Visible then
			MainInterface[FrameChosen].Visible = false
		end
	end)
	
	
	self._Maid.MouseClickConnection = self._Frame.ImageButton.MouseButton1Click:Connect(function(data)
		if self._Frame.Lock.Visible == false and MainInterface.InventoryUI.Visible and InFrame and self._ScrollFrame.Visible then
			game.ReplicatedStorage.GameAssets.Sounds.Equip:Play()
			MainInterface[FrameChosen].Position = UDim2.new(0, Mouse.x, 0, Mouse.y)
			local FrameName = GameDictionary.Items[self._Name].Item
			Knit.GetService("WeldService"):DestroyItem(FrameName)
			Knit.GetService("WeldService"):InstanceItem(FrameName, self._Name, self._Rarity, self._Upgrades, self._Damage)
			--------------------------------------------------------
			local FrameSelected = MainInterface.InventoryUI:FindFirstChild(FrameName.."Frame")
			--------------------------------------------------------
			local SavedImage = self._Frame.ImageButton.Image
			local SavedSlot = self._Frame.InventorySlot.ImageColor3
			local SavedUpgrade = self._Frame.UpgradeText.TextColor3
			local SavedUpgradeText = self._Frame.UpgradeText.Text
			--------------------------------------------------------
			local SavedName = self._Name
			local SavedRarity = self._Rarity
			local SavedUpgrades = self._Upgrades
			local SavedBonus = self._Bonus
			--------------------------------------------------------
			if FrameSelected.ImageButton.Image == "" then

				table.remove(InventoryTable, self._Iteration)

				self._Frame:Destroy()

				local tableChosen = InventoryTable

				for i,v in pairs (tableChosen) do
					if v._Iteration > self._Iteration then
						v._Iteration = v._Iteration - 1
						v._Frame.Name = v._Iteration
						if MainInterface.InventoryUI.Unsort.TextLabel.TextColor3 == Color3.fromRGB(226, 226, 226) then
							v._Frame.LayoutOrder = v._Iteration
						end					
					end
				end

				for i,v in pairs (self._ScrollFrame:GetChildren()) do
					if v:IsA("Frame") and v.ImageButton.Image == "" then
						if v.LayoutOrder > self._Iteration then
							v.LayoutOrder = v.LayoutOrder - 1
							v.Name = v.LayoutOrder			
						end
					end
				end

				local EmptyFrame = InventoryFrame.newEmpty(self._ScrollFrame.Name) -- + 1 because you want it to be at the end
				EmptyFrame:setEmpty()

			else

				self._Frame.ImageButton.Image = FrameSelected.ImageButton.Image 
				self._Frame.InventorySlot.ImageColor3 = FrameSelected.InventorySlot.ImageColor3
				self._Frame.UpgradeText.TextColor3 = FrameSelected.UpgradeText.TextColor3
				self._Frame.UpgradeText.Text = FrameSelected.UpgradeText.Text

				self._Name = FrameSelected.Info.ItemName.Value

				self._Rarity = FrameSelected.Info.ItemRarity.Value
				self._Frame.Rarity.Value = FrameSelected.Info.ItemRarity.Value

				self._Level = GameDictionary.Items[self._Name].Level
				self._Frame.Level.Value = GameDictionary.Items[self._Name].Level

				self._Upgrades = FrameSelected.Info.ItemUpgrades.Value
				self._Bonus = FrameSelected.Info.ItemBonus.Value


				self._Damage = GameDictionary.Items[self._Name].Base + (math.floor(((GameDictionary.Items[self._Name].Base*0.05)+1) + 0.5) 
					* GameDictionary.Rarities[self._Rarity].UpgradeMultiplier) + (math.floor(((GameDictionary.Items[self._Name].Base*0.05)+1) + 0.5) * self._Upgrades)

				if MainInterface.InventoryUI.SortLevel.TextLabel.TextColor3 == Color3.fromRGB(226, 226, 226) then
					self._Frame.LayoutOrder = -(self._Frame.Level.Value)
				elseif MainInterface.InventoryUI.SortRarity.TextLabel.TextColor3 == Color3.fromRGB(226, 226, 226) then
					self._Frame.LayoutOrder = GameDictionary.Rarities[self._Frame.Rarity.Value].Sort
				end	

			end

			FrameSelected.Info.ItemName.Value = SavedName
			FrameSelected.Info.ItemRarity.Value = SavedRarity
			FrameSelected.Info.ItemUpgrades.Value = SavedUpgrades
			FrameSelected.Info.ItemBonus.Value = SavedBonus

			FrameSelected.ImageButton.Image = SavedImage
			FrameSelected.InventorySlot.ImageColor3 = SavedSlot
			FrameSelected.UpgradeText.TextColor3 = SavedUpgrade
			FrameSelected.UpgradeText.Text = SavedUpgradeText

			MainInterface[FrameChosen].Visible = false

			for i,v in pairs (MainInterface[FrameChosen]:GetChildren()) do
				if v.Name ~= "UICorner" then
					v.Visible = false
				end
			end
			
		end
	end)

end

function InventoryFrame.MouseMovedFunction()
	for i,v in pairs (MainInterface.ItemInfo:GetChildren()) do
		if v.Name ~= "UICorner" then
			v.Visible = true
		end
	end
	for i,v in pairs (MainInterface.ItemInfo2:GetChildren()) do
		if v.Name ~= "UICorner" then
			v.Visible = true
		end
	end
end

function setButton(textButton)
	MainInterface.InventoryUI.SortLevel.TextLabel.TextColor3 = Color3.fromRGB(153, 153, 153)
	MainInterface.InventoryUI.SortLevel.BackgroundColor3 = Color3.fromRGB(97, 97, 97)
	MainInterface.InventoryUI.SortRarity.TextLabel.TextColor3 = Color3.fromRGB(153, 153, 153)
	MainInterface.InventoryUI.SortRarity.BackgroundColor3 = Color3.fromRGB(97, 97, 97)
	MainInterface.InventoryUI.Unsort.TextLabel.TextColor3 = Color3.fromRGB(153, 153, 153)
	MainInterface.InventoryUI.Unsort.BackgroundColor3 = Color3.fromRGB(97, 97, 97)
	-----------------------------------------------------------------------------
	textButton.TextLabel.TextColor3 = Color3.fromRGB(226, 226, 226)
	textButton.BackgroundColor3 = Color3.fromRGB(122, 122, 122)
end

MainInterface.InventoryUI.SortLevel.MouseButton1Click:Connect(function()
	game.ReplicatedStorage.GameAssets.Sounds.UIClick:Play()
	if MainInterface.InventoryUI.SortLevel.TextLabel.TextColor3 ~= Color3.fromRGB(226, 226, 226) then	
		setButton(MainInterface.InventoryUI.SortLevel)
		for i,v in pairs (MainInterface.InventoryUI.SFClip.ScrollingFrame:GetChildren()) do
			if v:IsA("Frame") then
				v.LayoutOrder = -(v.Level.Value)
			end	
		end
	end
	
end)

MainInterface.InventoryUI.SortRarity.MouseButton1Click:Connect(function()
	game.ReplicatedStorage.GameAssets.Sounds.UIClick:Play()
	if MainInterface.InventoryUI.SortRarity.TextLabel.TextColor3 ~= Color3.fromRGB(226, 226, 226) then
		setButton(MainInterface.InventoryUI.SortRarity)
		for i,v in pairs (MainInterface.InventoryUI.SFClip.ScrollingFrame:GetChildren()) do
			if v:IsA("Frame") then
				v.LayoutOrder = GameDictionary.Rarities[v.Rarity.Value].Sort
			end	
		end
	end
	
end)

MainInterface.InventoryUI.Unsort.MouseButton1Click:Connect(function()
	game.ReplicatedStorage.GameAssets.Sounds.UIClick:Play()
	if MainInterface.InventoryUI.Unsort.TextLabel.TextColor3 ~= Color3.fromRGB(226, 226, 226) then
		setButton(MainInterface.InventoryUI.Unsort)
		local TableChosen = InventoryTable
		for i,v in pairs (MainInterface.InventoryUI.SFClip.ScrollingFrame:GetChildren()) do
			if v:IsA("Frame") then
				v.LayoutOrder = 0 -->>: To reset the entire inventory layout
				v.Name = 0 -->>: To reset the entire inventory layout
			end
		end
		
		for i,v in pairs (TableChosen) do
			v._Frame.LayoutOrder = i
			v._Frame.Name = i
		end
		
		local iteration = 0
		
		for i,v in pairs (MainInterface.InventoryUI.SFClip.ScrollingFrame:GetChildren()) do
			if v:IsA("Frame") and v.ImageButton.Image == "" then
				iteration += 1
				v.LayoutOrder = #TableChosen + iteration
				v.Name = v.LayoutOrder
			end
		end
		
	end

end)
